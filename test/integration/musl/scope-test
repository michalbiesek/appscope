#! /bin/bash

DEBUG=0  # set this to 1 to capture the EVT_FILE for each test

FAILED_TEST_LIST=""
FAILED_TEST_COUNT=0

EVT_FILE="/opt/test-runner/logs/events.log"
SCOPE_LOG_FILE="/opt/test-runner/logs/scope.log"

starttest(){
    CURRENT_TEST=$1
    echo "==============================================="
    echo "             Testing $CURRENT_TEST             "
    echo "==============================================="
    ERR=0
}

evaltest(){
    echo "             Evaluating $CURRENT_TEST"
}

endtest(){
    if [ $ERR -eq "0" ]; then
        RESULT=PASSED
    else
        RESULT=FAILED
        FAILED_TEST_LIST+=$CURRENT_TEST
        FAILED_TEST_LIST+=" "
        FAILED_TEST_COUNT=$(($FAILED_TEST_COUNT + 1))
    fi

    echo "*************** $CURRENT_TEST $RESULT ***************"
    echo ""
    echo ""

    # copy the EVT_FILE to help with debugging
    if (( $DEBUG )) || [ $RESULT == "FAILED" ]; then
        cp -f $EVT_FILE $EVT_FILE.$CURRENT_TEST
    fi

    if [ $RESULT == "FAILED" ]; then
        cat $SCOPE_LOG_FILE
    fi

    rm -f $EVT_FILE
    rm -f $SCOPE_LOG_FILE
}

#check the backtrace
verifyBacktrace() {
    local expMsg=$1
    # The following preamble is common for all backtrace
    grep -a "Scope Version:" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "Unix Time: " $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "PID: " $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "Process name" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a -- "--- scopeLogBacktrace" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "$expMsg" $SCOPE_LOG_FILE > /dev/null
    if [ $? != 0 ]; then
        ERR+=$?
        echo "verifyBacktrace fails, params: $expMsg"
        cat $SCOPE_LOG_FILE
    fi
}

#
# extract on musl
#
starttest extract_musl

scope extract /opt/extract_scope
ERR+=$?

count=$(readelf -d /opt/extract_scope/libscope.so | grep 'Shared library:.*ld-linux' | wc -l)
if [ $count -ne 0 ] ; then 
    ERR+=1
fi

count=$(readelf -d /opt/extract_scope/libscope.so | grep 'Shared library:.*ld-musl' | wc -l)
if [ $count -ne 1 ] ; then 
    ERR+=1
fi

endtest

#
# scope patch
#
starttest patch_on_musl
cp /usr/local/scope/lib/libscope.so /opt/patch_libscope
cp /usr/local/scope/bin/scope /opt/patch_libscope

count=$(readelf -d /opt/patch_libscope/libscope.so | grep 'Shared library:.*ld-linux' | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

/opt/patch_libscope/scope -p /opt/patch_libscope/libscope.so
ERR+=$?

md5_after_first_patch=$(md5sum /opt/patch_libscope/libscope.so)

count=$(readelf -d /opt/patch_libscope/libscope.so | grep 'Shared library:.*ld-musl' | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

/opt/patch_libscope/scope -p /opt/patch_libscope/libscope.so
ERR+=$?

md5_after_second_patch=$(md5sum /opt/patch_libscope/libscope.so)

if [ "$md5_after_first_patch" != "$md5_after_second_patch" ]; then
    ERR+=1
fi

endtest

#
# fwrite binary
#
starttest fwrite

scope -z /opt/fwrite/fwrite
ERR+=$?

sleep 0.5
count=$(grep '"source":"fs.open"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

count=$(grep '"source":"fs.duration"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

count=$(grep '"source":"fs.write"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

count=$(grep '"source":"fs.close"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

endtest

#
# verify fault_test_read_only_mem
#

starttest fault_test_read_only_mem

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z -- ./fault_test 0

if [ "x86_64" = "$(uname -m)" ]; then
    grep "test_function" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
fi

verifyBacktrace "Invalid permissions for mapped object"

endtest

#
# verify fault_test_not_mapped_mem
#

starttest fault_test_not_mapped_mem

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z -- ./fault_test 1

if [ "x86_64" = "$(uname -m)" ]; then
    grep "test_function" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
fi

verifyBacktrace "Address not mapped to object"

endtest

#
# verify fault_test_bus_error
#

starttest fault_test_bus_error

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z -- ./fault_test 2

if [ "x86_64" = "$(uname -m)" ]; then
    grep "test_function" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
fi

verifyBacktrace "Nonexistent physical address"

endtest

#
# Illegal operand/opcode
#

starttest illegal_op_error

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z ./fault_test 4

if [ "x86_64" = "$(uname -m)" ]; then
    verifyBacktrace "Illegal operand"
else
    verifyBacktrace "Illegal opcode"
fi

endtest

#
# tls
#
starttest tls

# socat receives over a tls session and writes to $EVT_FILE
cat /usr/local/scope/key.pem /usr/local/scope/cert.pem >> /tmp/appscope.pem
socat OPENSSL-LISTEN:9109,reuseaddr,cert=/tmp/appscope.pem,cafile=/tmp/appscope.pem,fork,verify=0 $EVT_FILE &

# give socat a moment to get up and running
sleep 1

# run scope with a ton of env vars to send over tls session
  SCOPE_EVENT_DEST=tcp://127.0.0.1:9109 \
  SCOPE_EVENT_TLS_ENABLE=true \
  SCOPE_EVENT_METRIC=true \
  SCOPE_EVENT_TLS_CA_CERT_PATH=/tmp/appscope.pem \
  scope -z ps -ef
retval=$?

evaltest

# Verify that ps -ef is successful
if [ $retval -ne 0 ]; then
    ERR+=1
fi

# Verify that data made it through
if ( ! grep '"sourcetype":"console"' $EVT_FILE ); then
    ERR+=1
fi

endtest

# cleanup socat, since we're done with it now
kill `pidof socat`



if (( $FAILED_TEST_COUNT == 0 )); then
    echo ""
    echo ""
    echo "*************** ALL TESTS PASSED ***************"
else
    echo "*************** SOME TESTS FAILED ***************"
    echo "Failed tests: $FAILED_TEST_LIST"
    echo "Refer to these files for more info:"
    for FAILED_TEST in $FAILED_TEST_LIST; do
        echo "  $EVT_FILE.$FAILED_TEST"
    done
fi

exit ${FAILED_TEST_COUNT}
