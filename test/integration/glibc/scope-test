#! /bin/bash

DEBUG=0  # set this to 1 to capture the EVT_FILE for each test

FAILED_TEST_LIST=""
FAILED_TEST_COUNT=0

EVT_FILE="/opt/test-runner/logs/events.log"
SCOPE_LOG_FILE="/opt/test-runner/logs/scope.log"

starttest(){
    CURRENT_TEST=$1
    echo "==============================================="
    echo "             Testing $CURRENT_TEST             "
    echo "==============================================="
    ERR=0
}

evaltest(){
    echo "             Evaluating $CURRENT_TEST"
}

endtest(){
    if [ $ERR -eq "0" ]; then
        RESULT=PASSED
    else
        RESULT=FAILED
        FAILED_TEST_LIST+=$CURRENT_TEST
        FAILED_TEST_LIST+=" "
        FAILED_TEST_COUNT=$(($FAILED_TEST_COUNT + 1))
    fi

    echo "*************** $CURRENT_TEST $RESULT ***************"
    echo ""
    echo ""

    # copy the EVT_FILE to help with debugging
    if (( $DEBUG )) || [ $RESULT == "FAILED" ]; then
        cp -f $EVT_FILE $EVT_FILE.$CURRENT_TEST
    fi

    if [ $RESULT == "FAILED" ]; then
        cat $SCOPE_LOG_FILE
    fi

    rm -f $EVT_FILE
    rm -f $SCOPE_LOG_FILE
}

#check the backtrace
verifyBacktrace() {
    local expMsg=$1
    # The following preamble is common for all backtrace
    grep -a "Scope Version:" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "Unix Time: " $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "PID: " $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "Process name" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a -- "--- scopeLogBacktrace" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
    grep -a "$expMsg" $SCOPE_LOG_FILE > /dev/null
    if [ $? != 0 ]; then
        ERR+=$?
        echo "verifyBacktrace fails, params: $expMsg"
        cat $SCOPE_LOG_FILE
    fi
}

#
# extract on glibc
#
starttest extract_glibc

scope extract /opt/extract_scope
ERR+=$?

count=$(readelf -d /opt/extract_scope/libscope.so | grep 'Shared library:.*ld-linux' | wc -l)
if [ $count -ne 1 ] ; then 
    ERR+=1
fi

count=$(readelf -d /opt/extract_scope/libscope.so | grep 'Shared library:.*ld-musl' | wc -l)
if [ $count -ne 0 ] ; then 
    ERR+=1
fi

endtest

#
# scope patch
#
starttest patch_on_glibc

cp /usr/local/scope/lib/libscope.so /opt/patch_libscope

md5_before_patch=$(md5sum /opt/patch_libscope/libscope.so)

count=$(readelf -d /opt/patch_libscope/libscope.so | grep 'Shared library:.*ld-linux' | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

/opt/patch_libscope/scope --patch /opt/patch_libscope/libscope.so
if [ $? -eq 0 ]; then
    ERR+=1
fi

md5_after_patch=$(md5sum /opt/patch_libscope/libscope.so)

count=$(readelf -d /opt/patch_libscope/libscope.so | grep 'Shared library:.*ld-musl' | wc -l)
if [ $count -ne 0 ] ; then
    ERR+=1
fi

if [ "$md5_before_patch" != "$md5_after_patch" ]; then
    ERR+=1
fi

endtest

starttest patch_on_glibc_dummy_file

echo "Lorem ipsum" >> /opt/patch_libscope/dummy_file
/opt/patch_libscope/scope --patch /opt/patch_libscope/dummy_file
if [ $? -eq 0 ]; then
    ERR+=1
fi

endtest

#
# verify timestamp
#
starttest timestamp_verify

SCOPE_LOG_LEVEL=debug scope -z ls >/dev/null

timestamp=$(grep 'Constructor' $SCOPE_LOG_FILE | grep -Po "(?<=\[).*?(?=\])")
if [[ $timestamp =~ [0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}(Z|\+[0-9]{4})$ ]]; then
    echo "Timeststamp $timestamp is in expect format"
else
    ERR+=1
fi

endtest

#
# verify errno
#

starttest errno_verify
cd /opt/errno_test/

scope -z ./errno_test

if [ $? -ne 0 ]; then
    ERR+=1
fi

endtest

#
# verify fault_test_read_only_mem
#

starttest fault_test_read_only_mem

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z -- ./fault_test 0

if [ "x86_64" = "$(uname -m)" ]; then
    grep "read_only_area_error" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?

    grep "test_function" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
fi

verifyBacktrace "Invalid permissions for mapped object"

endtest

#
# verify fault_test_not_mapped_mem
#

starttest fault_test_not_mapped_mem

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z -- ./fault_test 1

if [ "x86_64" = "$(uname -m)" ]; then
    grep "not_mapped_address_error" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?

    grep "test_function" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
fi

verifyBacktrace "Address not mapped to object"

endtest

#
# verify fault_test_bus_error
#

starttest fault_test_bus_error

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z -- ./fault_test 2

if [ "x86_64" = "$(uname -m)" ]; then
    grep "bus_error" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?

    grep "test_function" $SCOPE_LOG_FILE > /dev/null
    ERR+=$?
fi

verifyBacktrace "Nonexistent physical address"

endtest

#
# verify division by zero
#

if [ "x86_64" = "$(uname -m)" ]; then

starttest div_by_zero_error

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z ./fault_test 3

verifyBacktrace "Integer divide by zero"

endtest

fi

#
# Illegal operand/opcode
#

starttest illegal_op_error

cd /opt/fault_test/

# TODO use the configuration for snapshot
SCOPE_ERROR_SIGNAL_HANDLER=log scope -z ./fault_test 4

if [ "x86_64" = "$(uname -m)" ]; then
    verifyBacktrace "Illegal operand"
else
    verifyBacktrace "Illegal opcode"
fi

endtest

if (( $FAILED_TEST_COUNT == 0 )); then
    echo ""
    echo ""
    echo "*************** ALL TESTS PASSED ***************"
else
    echo "*************** SOME TESTS FAILED ***************"
    echo "Failed tests: $FAILED_TEST_LIST"
    echo "Refer to these files for more info:"
    for FAILED_TEST in $FAILED_TEST_LIST; do
        echo "  $EVT_FILE.$FAILED_TEST"
    done
fi

exit ${FAILED_TEST_COUNT}
